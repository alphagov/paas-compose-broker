// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-compose-broker/compose"
	"github.com/compose/gocomposeapi"
)

type FakeClient struct {
	GetAccountStub        func() (*composeapi.Account, []error)
	getAccountMutex       sync.RWMutex
	getAccountArgsForCall []struct{}
	getAccountReturns     struct {
		result1 *composeapi.Account
		result2 []error
	}
	getAccountReturnsOnCall map[int]struct {
		result1 *composeapi.Account
		result2 []error
	}
	GetClustersStub        func() (*[]composeapi.Cluster, []error)
	getClustersMutex       sync.RWMutex
	getClustersArgsForCall []struct{}
	getClustersReturns     struct {
		result1 *[]composeapi.Cluster
		result2 []error
	}
	getClustersReturnsOnCall map[int]struct {
		result1 *[]composeapi.Cluster
		result2 []error
	}
	GetClusterByNameStub        func(string) (*composeapi.Cluster, []error)
	getClusterByNameMutex       sync.RWMutex
	getClusterByNameArgsForCall []struct {
		arg1 string
	}
	getClusterByNameReturns struct {
		result1 *composeapi.Cluster
		result2 []error
	}
	getClusterByNameReturnsOnCall map[int]struct {
		result1 *composeapi.Cluster
		result2 []error
	}
	CreateDeploymentStub        func(composeapi.DeploymentParams) (*composeapi.Deployment, []error)
	createDeploymentMutex       sync.RWMutex
	createDeploymentArgsForCall []struct {
		arg1 composeapi.DeploymentParams
	}
	createDeploymentReturns struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	createDeploymentReturnsOnCall map[int]struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	DeprovisionDeploymentStub        func(string) (*composeapi.Recipe, []error)
	deprovisionDeploymentMutex       sync.RWMutex
	deprovisionDeploymentArgsForCall []struct {
		arg1 string
	}
	deprovisionDeploymentReturns struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	deprovisionDeploymentReturnsOnCall map[int]struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	GetDeploymentStub        func(string) (*composeapi.Deployment, []error)
	getDeploymentMutex       sync.RWMutex
	getDeploymentArgsForCall []struct {
		arg1 string
	}
	getDeploymentReturns struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	getDeploymentReturnsOnCall map[int]struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	GetDeploymentByNameStub        func(string) (*composeapi.Deployment, []error)
	getDeploymentByNameMutex       sync.RWMutex
	getDeploymentByNameArgsForCall []struct {
		arg1 string
	}
	getDeploymentByNameReturns struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	getDeploymentByNameReturnsOnCall map[int]struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	GetDeploymentsStub        func() (*[]composeapi.Deployment, []error)
	getDeploymentsMutex       sync.RWMutex
	getDeploymentsArgsForCall []struct{}
	getDeploymentsReturns     struct {
		result1 *[]composeapi.Deployment
		result2 []error
	}
	getDeploymentsReturnsOnCall map[int]struct {
		result1 *[]composeapi.Deployment
		result2 []error
	}
	CreateDeploymentWhitelistStub        func(string, composeapi.DeploymentWhitelistParams) (*composeapi.Recipe, []error)
	createDeploymentWhitelistMutex       sync.RWMutex
	createDeploymentWhitelistArgsForCall []struct {
		arg1 string
		arg2 composeapi.DeploymentWhitelistParams
	}
	createDeploymentWhitelistReturns struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	createDeploymentWhitelistReturnsOnCall map[int]struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	GetWhitelistForDeploymentStub        func(string) ([]composeapi.DeploymentWhitelist, []error)
	getWhitelistForDeploymentMutex       sync.RWMutex
	getWhitelistForDeploymentArgsForCall []struct {
		arg1 string
	}
	getWhitelistForDeploymentReturns struct {
		result1 []composeapi.DeploymentWhitelist
		result2 []error
	}
	getWhitelistForDeploymentReturnsOnCall map[int]struct {
		result1 []composeapi.DeploymentWhitelist
		result2 []error
	}
	GetRecipeStub        func(string) (*composeapi.Recipe, []error)
	getRecipeMutex       sync.RWMutex
	getRecipeArgsForCall []struct {
		arg1 string
	}
	getRecipeReturns struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	getRecipeReturnsOnCall map[int]struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	SetScalingsStub        func(composeapi.ScalingsParams) (*composeapi.Recipe, []error)
	setScalingsMutex       sync.RWMutex
	setScalingsArgsForCall []struct {
		arg1 composeapi.ScalingsParams
	}
	setScalingsReturns struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	setScalingsReturnsOnCall map[int]struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	GetBackupsForDeploymentStub        func(string) (*[]composeapi.Backup, []error)
	getBackupsForDeploymentMutex       sync.RWMutex
	getBackupsForDeploymentArgsForCall []struct {
		arg1 string
	}
	getBackupsForDeploymentReturns struct {
		result1 *[]composeapi.Backup
		result2 []error
	}
	getBackupsForDeploymentReturnsOnCall map[int]struct {
		result1 *[]composeapi.Backup
		result2 []error
	}
	RestoreBackupStub        func(composeapi.RestoreBackupParams) (*composeapi.Deployment, []error)
	restoreBackupMutex       sync.RWMutex
	restoreBackupArgsForCall []struct {
		arg1 composeapi.RestoreBackupParams
	}
	restoreBackupReturns struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	restoreBackupReturnsOnCall map[int]struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	PatchDeploymentStub        func(composeapi.PatchDeploymentParams) (*composeapi.Deployment, []error)
	patchDeploymentMutex       sync.RWMutex
	patchDeploymentArgsForCall []struct {
		arg1 composeapi.PatchDeploymentParams
	}
	patchDeploymentReturns struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	patchDeploymentReturnsOnCall map[int]struct {
		result1 *composeapi.Deployment
		result2 []error
	}
	StartBackupForDeploymentStub        func(deploymentid string) (*composeapi.Recipe, []error)
	startBackupForDeploymentMutex       sync.RWMutex
	startBackupForDeploymentArgsForCall []struct {
		deploymentid string
	}
	startBackupForDeploymentReturns struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	startBackupForDeploymentReturnsOnCall map[int]struct {
		result1 *composeapi.Recipe
		result2 []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetAccount() (*composeapi.Account, []error) {
	fake.getAccountMutex.Lock()
	ret, specificReturn := fake.getAccountReturnsOnCall[len(fake.getAccountArgsForCall)]
	fake.getAccountArgsForCall = append(fake.getAccountArgsForCall, struct{}{})
	fake.recordInvocation("GetAccount", []interface{}{})
	fake.getAccountMutex.Unlock()
	if fake.GetAccountStub != nil {
		return fake.GetAccountStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAccountReturns.result1, fake.getAccountReturns.result2
}

func (fake *FakeClient) GetAccountCallCount() int {
	fake.getAccountMutex.RLock()
	defer fake.getAccountMutex.RUnlock()
	return len(fake.getAccountArgsForCall)
}

func (fake *FakeClient) GetAccountReturns(result1 *composeapi.Account, result2 []error) {
	fake.GetAccountStub = nil
	fake.getAccountReturns = struct {
		result1 *composeapi.Account
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetAccountReturnsOnCall(i int, result1 *composeapi.Account, result2 []error) {
	fake.GetAccountStub = nil
	if fake.getAccountReturnsOnCall == nil {
		fake.getAccountReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Account
			result2 []error
		})
	}
	fake.getAccountReturnsOnCall[i] = struct {
		result1 *composeapi.Account
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetClusters() (*[]composeapi.Cluster, []error) {
	fake.getClustersMutex.Lock()
	ret, specificReturn := fake.getClustersReturnsOnCall[len(fake.getClustersArgsForCall)]
	fake.getClustersArgsForCall = append(fake.getClustersArgsForCall, struct{}{})
	fake.recordInvocation("GetClusters", []interface{}{})
	fake.getClustersMutex.Unlock()
	if fake.GetClustersStub != nil {
		return fake.GetClustersStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getClustersReturns.result1, fake.getClustersReturns.result2
}

func (fake *FakeClient) GetClustersCallCount() int {
	fake.getClustersMutex.RLock()
	defer fake.getClustersMutex.RUnlock()
	return len(fake.getClustersArgsForCall)
}

func (fake *FakeClient) GetClustersReturns(result1 *[]composeapi.Cluster, result2 []error) {
	fake.GetClustersStub = nil
	fake.getClustersReturns = struct {
		result1 *[]composeapi.Cluster
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetClustersReturnsOnCall(i int, result1 *[]composeapi.Cluster, result2 []error) {
	fake.GetClustersStub = nil
	if fake.getClustersReturnsOnCall == nil {
		fake.getClustersReturnsOnCall = make(map[int]struct {
			result1 *[]composeapi.Cluster
			result2 []error
		})
	}
	fake.getClustersReturnsOnCall[i] = struct {
		result1 *[]composeapi.Cluster
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetClusterByName(arg1 string) (*composeapi.Cluster, []error) {
	fake.getClusterByNameMutex.Lock()
	ret, specificReturn := fake.getClusterByNameReturnsOnCall[len(fake.getClusterByNameArgsForCall)]
	fake.getClusterByNameArgsForCall = append(fake.getClusterByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetClusterByName", []interface{}{arg1})
	fake.getClusterByNameMutex.Unlock()
	if fake.GetClusterByNameStub != nil {
		return fake.GetClusterByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getClusterByNameReturns.result1, fake.getClusterByNameReturns.result2
}

func (fake *FakeClient) GetClusterByNameCallCount() int {
	fake.getClusterByNameMutex.RLock()
	defer fake.getClusterByNameMutex.RUnlock()
	return len(fake.getClusterByNameArgsForCall)
}

func (fake *FakeClient) GetClusterByNameArgsForCall(i int) string {
	fake.getClusterByNameMutex.RLock()
	defer fake.getClusterByNameMutex.RUnlock()
	return fake.getClusterByNameArgsForCall[i].arg1
}

func (fake *FakeClient) GetClusterByNameReturns(result1 *composeapi.Cluster, result2 []error) {
	fake.GetClusterByNameStub = nil
	fake.getClusterByNameReturns = struct {
		result1 *composeapi.Cluster
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetClusterByNameReturnsOnCall(i int, result1 *composeapi.Cluster, result2 []error) {
	fake.GetClusterByNameStub = nil
	if fake.getClusterByNameReturnsOnCall == nil {
		fake.getClusterByNameReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Cluster
			result2 []error
		})
	}
	fake.getClusterByNameReturnsOnCall[i] = struct {
		result1 *composeapi.Cluster
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) CreateDeployment(arg1 composeapi.DeploymentParams) (*composeapi.Deployment, []error) {
	fake.createDeploymentMutex.Lock()
	ret, specificReturn := fake.createDeploymentReturnsOnCall[len(fake.createDeploymentArgsForCall)]
	fake.createDeploymentArgsForCall = append(fake.createDeploymentArgsForCall, struct {
		arg1 composeapi.DeploymentParams
	}{arg1})
	fake.recordInvocation("CreateDeployment", []interface{}{arg1})
	fake.createDeploymentMutex.Unlock()
	if fake.CreateDeploymentStub != nil {
		return fake.CreateDeploymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDeploymentReturns.result1, fake.createDeploymentReturns.result2
}

func (fake *FakeClient) CreateDeploymentCallCount() int {
	fake.createDeploymentMutex.RLock()
	defer fake.createDeploymentMutex.RUnlock()
	return len(fake.createDeploymentArgsForCall)
}

func (fake *FakeClient) CreateDeploymentArgsForCall(i int) composeapi.DeploymentParams {
	fake.createDeploymentMutex.RLock()
	defer fake.createDeploymentMutex.RUnlock()
	return fake.createDeploymentArgsForCall[i].arg1
}

func (fake *FakeClient) CreateDeploymentReturns(result1 *composeapi.Deployment, result2 []error) {
	fake.CreateDeploymentStub = nil
	fake.createDeploymentReturns = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) CreateDeploymentReturnsOnCall(i int, result1 *composeapi.Deployment, result2 []error) {
	fake.CreateDeploymentStub = nil
	if fake.createDeploymentReturnsOnCall == nil {
		fake.createDeploymentReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Deployment
			result2 []error
		})
	}
	fake.createDeploymentReturnsOnCall[i] = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) DeprovisionDeployment(arg1 string) (*composeapi.Recipe, []error) {
	fake.deprovisionDeploymentMutex.Lock()
	ret, specificReturn := fake.deprovisionDeploymentReturnsOnCall[len(fake.deprovisionDeploymentArgsForCall)]
	fake.deprovisionDeploymentArgsForCall = append(fake.deprovisionDeploymentArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeprovisionDeployment", []interface{}{arg1})
	fake.deprovisionDeploymentMutex.Unlock()
	if fake.DeprovisionDeploymentStub != nil {
		return fake.DeprovisionDeploymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deprovisionDeploymentReturns.result1, fake.deprovisionDeploymentReturns.result2
}

func (fake *FakeClient) DeprovisionDeploymentCallCount() int {
	fake.deprovisionDeploymentMutex.RLock()
	defer fake.deprovisionDeploymentMutex.RUnlock()
	return len(fake.deprovisionDeploymentArgsForCall)
}

func (fake *FakeClient) DeprovisionDeploymentArgsForCall(i int) string {
	fake.deprovisionDeploymentMutex.RLock()
	defer fake.deprovisionDeploymentMutex.RUnlock()
	return fake.deprovisionDeploymentArgsForCall[i].arg1
}

func (fake *FakeClient) DeprovisionDeploymentReturns(result1 *composeapi.Recipe, result2 []error) {
	fake.DeprovisionDeploymentStub = nil
	fake.deprovisionDeploymentReturns = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) DeprovisionDeploymentReturnsOnCall(i int, result1 *composeapi.Recipe, result2 []error) {
	fake.DeprovisionDeploymentStub = nil
	if fake.deprovisionDeploymentReturnsOnCall == nil {
		fake.deprovisionDeploymentReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Recipe
			result2 []error
		})
	}
	fake.deprovisionDeploymentReturnsOnCall[i] = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetDeployment(arg1 string) (*composeapi.Deployment, []error) {
	fake.getDeploymentMutex.Lock()
	ret, specificReturn := fake.getDeploymentReturnsOnCall[len(fake.getDeploymentArgsForCall)]
	fake.getDeploymentArgsForCall = append(fake.getDeploymentArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDeployment", []interface{}{arg1})
	fake.getDeploymentMutex.Unlock()
	if fake.GetDeploymentStub != nil {
		return fake.GetDeploymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDeploymentReturns.result1, fake.getDeploymentReturns.result2
}

func (fake *FakeClient) GetDeploymentCallCount() int {
	fake.getDeploymentMutex.RLock()
	defer fake.getDeploymentMutex.RUnlock()
	return len(fake.getDeploymentArgsForCall)
}

func (fake *FakeClient) GetDeploymentArgsForCall(i int) string {
	fake.getDeploymentMutex.RLock()
	defer fake.getDeploymentMutex.RUnlock()
	return fake.getDeploymentArgsForCall[i].arg1
}

func (fake *FakeClient) GetDeploymentReturns(result1 *composeapi.Deployment, result2 []error) {
	fake.GetDeploymentStub = nil
	fake.getDeploymentReturns = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetDeploymentReturnsOnCall(i int, result1 *composeapi.Deployment, result2 []error) {
	fake.GetDeploymentStub = nil
	if fake.getDeploymentReturnsOnCall == nil {
		fake.getDeploymentReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Deployment
			result2 []error
		})
	}
	fake.getDeploymentReturnsOnCall[i] = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetDeploymentByName(arg1 string) (*composeapi.Deployment, []error) {
	fake.getDeploymentByNameMutex.Lock()
	ret, specificReturn := fake.getDeploymentByNameReturnsOnCall[len(fake.getDeploymentByNameArgsForCall)]
	fake.getDeploymentByNameArgsForCall = append(fake.getDeploymentByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetDeploymentByName", []interface{}{arg1})
	fake.getDeploymentByNameMutex.Unlock()
	if fake.GetDeploymentByNameStub != nil {
		return fake.GetDeploymentByNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDeploymentByNameReturns.result1, fake.getDeploymentByNameReturns.result2
}

func (fake *FakeClient) GetDeploymentByNameCallCount() int {
	fake.getDeploymentByNameMutex.RLock()
	defer fake.getDeploymentByNameMutex.RUnlock()
	return len(fake.getDeploymentByNameArgsForCall)
}

func (fake *FakeClient) GetDeploymentByNameArgsForCall(i int) string {
	fake.getDeploymentByNameMutex.RLock()
	defer fake.getDeploymentByNameMutex.RUnlock()
	return fake.getDeploymentByNameArgsForCall[i].arg1
}

func (fake *FakeClient) GetDeploymentByNameReturns(result1 *composeapi.Deployment, result2 []error) {
	fake.GetDeploymentByNameStub = nil
	fake.getDeploymentByNameReturns = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetDeploymentByNameReturnsOnCall(i int, result1 *composeapi.Deployment, result2 []error) {
	fake.GetDeploymentByNameStub = nil
	if fake.getDeploymentByNameReturnsOnCall == nil {
		fake.getDeploymentByNameReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Deployment
			result2 []error
		})
	}
	fake.getDeploymentByNameReturnsOnCall[i] = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetDeployments() (*[]composeapi.Deployment, []error) {
	fake.getDeploymentsMutex.Lock()
	ret, specificReturn := fake.getDeploymentsReturnsOnCall[len(fake.getDeploymentsArgsForCall)]
	fake.getDeploymentsArgsForCall = append(fake.getDeploymentsArgsForCall, struct{}{})
	fake.recordInvocation("GetDeployments", []interface{}{})
	fake.getDeploymentsMutex.Unlock()
	if fake.GetDeploymentsStub != nil {
		return fake.GetDeploymentsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getDeploymentsReturns.result1, fake.getDeploymentsReturns.result2
}

func (fake *FakeClient) GetDeploymentsCallCount() int {
	fake.getDeploymentsMutex.RLock()
	defer fake.getDeploymentsMutex.RUnlock()
	return len(fake.getDeploymentsArgsForCall)
}

func (fake *FakeClient) GetDeploymentsReturns(result1 *[]composeapi.Deployment, result2 []error) {
	fake.GetDeploymentsStub = nil
	fake.getDeploymentsReturns = struct {
		result1 *[]composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetDeploymentsReturnsOnCall(i int, result1 *[]composeapi.Deployment, result2 []error) {
	fake.GetDeploymentsStub = nil
	if fake.getDeploymentsReturnsOnCall == nil {
		fake.getDeploymentsReturnsOnCall = make(map[int]struct {
			result1 *[]composeapi.Deployment
			result2 []error
		})
	}
	fake.getDeploymentsReturnsOnCall[i] = struct {
		result1 *[]composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) CreateDeploymentWhitelist(arg1 string, arg2 composeapi.DeploymentWhitelistParams) (*composeapi.Recipe, []error) {
	fake.createDeploymentWhitelistMutex.Lock()
	ret, specificReturn := fake.createDeploymentWhitelistReturnsOnCall[len(fake.createDeploymentWhitelistArgsForCall)]
	fake.createDeploymentWhitelistArgsForCall = append(fake.createDeploymentWhitelistArgsForCall, struct {
		arg1 string
		arg2 composeapi.DeploymentWhitelistParams
	}{arg1, arg2})
	fake.recordInvocation("CreateDeploymentWhitelist", []interface{}{arg1, arg2})
	fake.createDeploymentWhitelistMutex.Unlock()
	if fake.CreateDeploymentWhitelistStub != nil {
		return fake.CreateDeploymentWhitelistStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createDeploymentWhitelistReturns.result1, fake.createDeploymentWhitelistReturns.result2
}

func (fake *FakeClient) CreateDeploymentWhitelistCallCount() int {
	fake.createDeploymentWhitelistMutex.RLock()
	defer fake.createDeploymentWhitelistMutex.RUnlock()
	return len(fake.createDeploymentWhitelistArgsForCall)
}

func (fake *FakeClient) CreateDeploymentWhitelistArgsForCall(i int) (string, composeapi.DeploymentWhitelistParams) {
	fake.createDeploymentWhitelistMutex.RLock()
	defer fake.createDeploymentWhitelistMutex.RUnlock()
	return fake.createDeploymentWhitelistArgsForCall[i].arg1, fake.createDeploymentWhitelistArgsForCall[i].arg2
}

func (fake *FakeClient) CreateDeploymentWhitelistReturns(result1 *composeapi.Recipe, result2 []error) {
	fake.CreateDeploymentWhitelistStub = nil
	fake.createDeploymentWhitelistReturns = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) CreateDeploymentWhitelistReturnsOnCall(i int, result1 *composeapi.Recipe, result2 []error) {
	fake.CreateDeploymentWhitelistStub = nil
	if fake.createDeploymentWhitelistReturnsOnCall == nil {
		fake.createDeploymentWhitelistReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Recipe
			result2 []error
		})
	}
	fake.createDeploymentWhitelistReturnsOnCall[i] = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetWhitelistForDeployment(arg1 string) ([]composeapi.DeploymentWhitelist, []error) {
	fake.getWhitelistForDeploymentMutex.Lock()
	ret, specificReturn := fake.getWhitelistForDeploymentReturnsOnCall[len(fake.getWhitelistForDeploymentArgsForCall)]
	fake.getWhitelistForDeploymentArgsForCall = append(fake.getWhitelistForDeploymentArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetWhitelistForDeployment", []interface{}{arg1})
	fake.getWhitelistForDeploymentMutex.Unlock()
	if fake.GetWhitelistForDeploymentStub != nil {
		return fake.GetWhitelistForDeploymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getWhitelistForDeploymentReturns.result1, fake.getWhitelistForDeploymentReturns.result2
}

func (fake *FakeClient) GetWhitelistForDeploymentCallCount() int {
	fake.getWhitelistForDeploymentMutex.RLock()
	defer fake.getWhitelistForDeploymentMutex.RUnlock()
	return len(fake.getWhitelistForDeploymentArgsForCall)
}

func (fake *FakeClient) GetWhitelistForDeploymentArgsForCall(i int) string {
	fake.getWhitelistForDeploymentMutex.RLock()
	defer fake.getWhitelistForDeploymentMutex.RUnlock()
	return fake.getWhitelistForDeploymentArgsForCall[i].arg1
}

func (fake *FakeClient) GetWhitelistForDeploymentReturns(result1 []composeapi.DeploymentWhitelist, result2 []error) {
	fake.GetWhitelistForDeploymentStub = nil
	fake.getWhitelistForDeploymentReturns = struct {
		result1 []composeapi.DeploymentWhitelist
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetWhitelistForDeploymentReturnsOnCall(i int, result1 []composeapi.DeploymentWhitelist, result2 []error) {
	fake.GetWhitelistForDeploymentStub = nil
	if fake.getWhitelistForDeploymentReturnsOnCall == nil {
		fake.getWhitelistForDeploymentReturnsOnCall = make(map[int]struct {
			result1 []composeapi.DeploymentWhitelist
			result2 []error
		})
	}
	fake.getWhitelistForDeploymentReturnsOnCall[i] = struct {
		result1 []composeapi.DeploymentWhitelist
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetRecipe(arg1 string) (*composeapi.Recipe, []error) {
	fake.getRecipeMutex.Lock()
	ret, specificReturn := fake.getRecipeReturnsOnCall[len(fake.getRecipeArgsForCall)]
	fake.getRecipeArgsForCall = append(fake.getRecipeArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetRecipe", []interface{}{arg1})
	fake.getRecipeMutex.Unlock()
	if fake.GetRecipeStub != nil {
		return fake.GetRecipeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getRecipeReturns.result1, fake.getRecipeReturns.result2
}

func (fake *FakeClient) GetRecipeCallCount() int {
	fake.getRecipeMutex.RLock()
	defer fake.getRecipeMutex.RUnlock()
	return len(fake.getRecipeArgsForCall)
}

func (fake *FakeClient) GetRecipeArgsForCall(i int) string {
	fake.getRecipeMutex.RLock()
	defer fake.getRecipeMutex.RUnlock()
	return fake.getRecipeArgsForCall[i].arg1
}

func (fake *FakeClient) GetRecipeReturns(result1 *composeapi.Recipe, result2 []error) {
	fake.GetRecipeStub = nil
	fake.getRecipeReturns = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetRecipeReturnsOnCall(i int, result1 *composeapi.Recipe, result2 []error) {
	fake.GetRecipeStub = nil
	if fake.getRecipeReturnsOnCall == nil {
		fake.getRecipeReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Recipe
			result2 []error
		})
	}
	fake.getRecipeReturnsOnCall[i] = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) SetScalings(arg1 composeapi.ScalingsParams) (*composeapi.Recipe, []error) {
	fake.setScalingsMutex.Lock()
	ret, specificReturn := fake.setScalingsReturnsOnCall[len(fake.setScalingsArgsForCall)]
	fake.setScalingsArgsForCall = append(fake.setScalingsArgsForCall, struct {
		arg1 composeapi.ScalingsParams
	}{arg1})
	fake.recordInvocation("SetScalings", []interface{}{arg1})
	fake.setScalingsMutex.Unlock()
	if fake.SetScalingsStub != nil {
		return fake.SetScalingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setScalingsReturns.result1, fake.setScalingsReturns.result2
}

func (fake *FakeClient) SetScalingsCallCount() int {
	fake.setScalingsMutex.RLock()
	defer fake.setScalingsMutex.RUnlock()
	return len(fake.setScalingsArgsForCall)
}

func (fake *FakeClient) SetScalingsArgsForCall(i int) composeapi.ScalingsParams {
	fake.setScalingsMutex.RLock()
	defer fake.setScalingsMutex.RUnlock()
	return fake.setScalingsArgsForCall[i].arg1
}

func (fake *FakeClient) SetScalingsReturns(result1 *composeapi.Recipe, result2 []error) {
	fake.SetScalingsStub = nil
	fake.setScalingsReturns = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) SetScalingsReturnsOnCall(i int, result1 *composeapi.Recipe, result2 []error) {
	fake.SetScalingsStub = nil
	if fake.setScalingsReturnsOnCall == nil {
		fake.setScalingsReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Recipe
			result2 []error
		})
	}
	fake.setScalingsReturnsOnCall[i] = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetBackupsForDeployment(arg1 string) (*[]composeapi.Backup, []error) {
	fake.getBackupsForDeploymentMutex.Lock()
	ret, specificReturn := fake.getBackupsForDeploymentReturnsOnCall[len(fake.getBackupsForDeploymentArgsForCall)]
	fake.getBackupsForDeploymentArgsForCall = append(fake.getBackupsForDeploymentArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBackupsForDeployment", []interface{}{arg1})
	fake.getBackupsForDeploymentMutex.Unlock()
	if fake.GetBackupsForDeploymentStub != nil {
		return fake.GetBackupsForDeploymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getBackupsForDeploymentReturns.result1, fake.getBackupsForDeploymentReturns.result2
}

func (fake *FakeClient) GetBackupsForDeploymentCallCount() int {
	fake.getBackupsForDeploymentMutex.RLock()
	defer fake.getBackupsForDeploymentMutex.RUnlock()
	return len(fake.getBackupsForDeploymentArgsForCall)
}

func (fake *FakeClient) GetBackupsForDeploymentArgsForCall(i int) string {
	fake.getBackupsForDeploymentMutex.RLock()
	defer fake.getBackupsForDeploymentMutex.RUnlock()
	return fake.getBackupsForDeploymentArgsForCall[i].arg1
}

func (fake *FakeClient) GetBackupsForDeploymentReturns(result1 *[]composeapi.Backup, result2 []error) {
	fake.GetBackupsForDeploymentStub = nil
	fake.getBackupsForDeploymentReturns = struct {
		result1 *[]composeapi.Backup
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) GetBackupsForDeploymentReturnsOnCall(i int, result1 *[]composeapi.Backup, result2 []error) {
	fake.GetBackupsForDeploymentStub = nil
	if fake.getBackupsForDeploymentReturnsOnCall == nil {
		fake.getBackupsForDeploymentReturnsOnCall = make(map[int]struct {
			result1 *[]composeapi.Backup
			result2 []error
		})
	}
	fake.getBackupsForDeploymentReturnsOnCall[i] = struct {
		result1 *[]composeapi.Backup
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) RestoreBackup(arg1 composeapi.RestoreBackupParams) (*composeapi.Deployment, []error) {
	fake.restoreBackupMutex.Lock()
	ret, specificReturn := fake.restoreBackupReturnsOnCall[len(fake.restoreBackupArgsForCall)]
	fake.restoreBackupArgsForCall = append(fake.restoreBackupArgsForCall, struct {
		arg1 composeapi.RestoreBackupParams
	}{arg1})
	fake.recordInvocation("RestoreBackup", []interface{}{arg1})
	fake.restoreBackupMutex.Unlock()
	if fake.RestoreBackupStub != nil {
		return fake.RestoreBackupStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.restoreBackupReturns.result1, fake.restoreBackupReturns.result2
}

func (fake *FakeClient) RestoreBackupCallCount() int {
	fake.restoreBackupMutex.RLock()
	defer fake.restoreBackupMutex.RUnlock()
	return len(fake.restoreBackupArgsForCall)
}

func (fake *FakeClient) RestoreBackupArgsForCall(i int) composeapi.RestoreBackupParams {
	fake.restoreBackupMutex.RLock()
	defer fake.restoreBackupMutex.RUnlock()
	return fake.restoreBackupArgsForCall[i].arg1
}

func (fake *FakeClient) RestoreBackupReturns(result1 *composeapi.Deployment, result2 []error) {
	fake.RestoreBackupStub = nil
	fake.restoreBackupReturns = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) RestoreBackupReturnsOnCall(i int, result1 *composeapi.Deployment, result2 []error) {
	fake.RestoreBackupStub = nil
	if fake.restoreBackupReturnsOnCall == nil {
		fake.restoreBackupReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Deployment
			result2 []error
		})
	}
	fake.restoreBackupReturnsOnCall[i] = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) PatchDeployment(arg1 composeapi.PatchDeploymentParams) (*composeapi.Deployment, []error) {
	fake.patchDeploymentMutex.Lock()
	ret, specificReturn := fake.patchDeploymentReturnsOnCall[len(fake.patchDeploymentArgsForCall)]
	fake.patchDeploymentArgsForCall = append(fake.patchDeploymentArgsForCall, struct {
		arg1 composeapi.PatchDeploymentParams
	}{arg1})
	fake.recordInvocation("PatchDeployment", []interface{}{arg1})
	fake.patchDeploymentMutex.Unlock()
	if fake.PatchDeploymentStub != nil {
		return fake.PatchDeploymentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.patchDeploymentReturns.result1, fake.patchDeploymentReturns.result2
}

func (fake *FakeClient) PatchDeploymentCallCount() int {
	fake.patchDeploymentMutex.RLock()
	defer fake.patchDeploymentMutex.RUnlock()
	return len(fake.patchDeploymentArgsForCall)
}

func (fake *FakeClient) PatchDeploymentArgsForCall(i int) composeapi.PatchDeploymentParams {
	fake.patchDeploymentMutex.RLock()
	defer fake.patchDeploymentMutex.RUnlock()
	return fake.patchDeploymentArgsForCall[i].arg1
}

func (fake *FakeClient) PatchDeploymentReturns(result1 *composeapi.Deployment, result2 []error) {
	fake.PatchDeploymentStub = nil
	fake.patchDeploymentReturns = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) PatchDeploymentReturnsOnCall(i int, result1 *composeapi.Deployment, result2 []error) {
	fake.PatchDeploymentStub = nil
	if fake.patchDeploymentReturnsOnCall == nil {
		fake.patchDeploymentReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Deployment
			result2 []error
		})
	}
	fake.patchDeploymentReturnsOnCall[i] = struct {
		result1 *composeapi.Deployment
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) StartBackupForDeployment(deploymentid string) (*composeapi.Recipe, []error) {
	fake.startBackupForDeploymentMutex.Lock()
	ret, specificReturn := fake.startBackupForDeploymentReturnsOnCall[len(fake.startBackupForDeploymentArgsForCall)]
	fake.startBackupForDeploymentArgsForCall = append(fake.startBackupForDeploymentArgsForCall, struct {
		deploymentid string
	}{deploymentid})
	fake.recordInvocation("StartBackupForDeployment", []interface{}{deploymentid})
	fake.startBackupForDeploymentMutex.Unlock()
	if fake.StartBackupForDeploymentStub != nil {
		return fake.StartBackupForDeploymentStub(deploymentid)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.startBackupForDeploymentReturns.result1, fake.startBackupForDeploymentReturns.result2
}

func (fake *FakeClient) StartBackupForDeploymentCallCount() int {
	fake.startBackupForDeploymentMutex.RLock()
	defer fake.startBackupForDeploymentMutex.RUnlock()
	return len(fake.startBackupForDeploymentArgsForCall)
}

func (fake *FakeClient) StartBackupForDeploymentArgsForCall(i int) string {
	fake.startBackupForDeploymentMutex.RLock()
	defer fake.startBackupForDeploymentMutex.RUnlock()
	return fake.startBackupForDeploymentArgsForCall[i].deploymentid
}

func (fake *FakeClient) StartBackupForDeploymentReturns(result1 *composeapi.Recipe, result2 []error) {
	fake.StartBackupForDeploymentStub = nil
	fake.startBackupForDeploymentReturns = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) StartBackupForDeploymentReturnsOnCall(i int, result1 *composeapi.Recipe, result2 []error) {
	fake.StartBackupForDeploymentStub = nil
	if fake.startBackupForDeploymentReturnsOnCall == nil {
		fake.startBackupForDeploymentReturnsOnCall = make(map[int]struct {
			result1 *composeapi.Recipe
			result2 []error
		})
	}
	fake.startBackupForDeploymentReturnsOnCall[i] = struct {
		result1 *composeapi.Recipe
		result2 []error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAccountMutex.RLock()
	defer fake.getAccountMutex.RUnlock()
	fake.getClustersMutex.RLock()
	defer fake.getClustersMutex.RUnlock()
	fake.getClusterByNameMutex.RLock()
	defer fake.getClusterByNameMutex.RUnlock()
	fake.createDeploymentMutex.RLock()
	defer fake.createDeploymentMutex.RUnlock()
	fake.deprovisionDeploymentMutex.RLock()
	defer fake.deprovisionDeploymentMutex.RUnlock()
	fake.getDeploymentMutex.RLock()
	defer fake.getDeploymentMutex.RUnlock()
	fake.getDeploymentByNameMutex.RLock()
	defer fake.getDeploymentByNameMutex.RUnlock()
	fake.getDeploymentsMutex.RLock()
	defer fake.getDeploymentsMutex.RUnlock()
	fake.createDeploymentWhitelistMutex.RLock()
	defer fake.createDeploymentWhitelistMutex.RUnlock()
	fake.getWhitelistForDeploymentMutex.RLock()
	defer fake.getWhitelistForDeploymentMutex.RUnlock()
	fake.getRecipeMutex.RLock()
	defer fake.getRecipeMutex.RUnlock()
	fake.setScalingsMutex.RLock()
	defer fake.setScalingsMutex.RUnlock()
	fake.getBackupsForDeploymentMutex.RLock()
	defer fake.getBackupsForDeploymentMutex.RUnlock()
	fake.restoreBackupMutex.RLock()
	defer fake.restoreBackupMutex.RUnlock()
	fake.patchDeploymentMutex.RLock()
	defer fake.patchDeploymentMutex.RUnlock()
	fake.startBackupForDeploymentMutex.RLock()
	defer fake.startBackupForDeploymentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ compose.Client = new(FakeClient)
